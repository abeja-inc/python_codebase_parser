name: lint

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, closed]

jobs:
  docker_lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for changes in Dockerfile
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            changed:
              - "context/Dockerfile"

      - name: Lint Dockerfile
        if: steps.filter.outputs.changed == 'true'
        uses: hadolint/hadolint-action@master
        with:
          dockerfile: "context/Dockerfile"
          ignore: 'DL3006,DL3008'

  lint_python_scripts:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Installing poetry
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: Installing dependencies
        run: |
          poetry config virtualenvs.create false && poetry config virtualenvs.in-project false
          cd experimentation
          poetry install --with dev

      - name: Finding changed packages
        id: changed_packages
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            git fetch origin --depth=2
            BASE_SHA=$(git rev-parse "${{ github.sha }}^")
            HEAD_SHA="${{ github.sha }}"
          fi

          echo "Comparing $BASE_SHA...$HEAD_SHA"
          DIFF_FILES=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" -- '*.py')
          echo "Modified Python files:"
          echo "$DIFF_FILES"

          PACKAGES=""
          for file in $DIFF_FILES; do
            dir=$(dirname "$file")
            package_dir=""
            while [ "$dir" != "." ] && [ "$dir" != "/" ]; do
              if [ -f "$dir/pyproject.toml" ]; then
                package_dir="$dir"
                break
              fi
              dir=$(dirname "$dir")
            done
            if [ -n "$package_dir" ]; then
              PACKAGES="$PACKAGES $package_dir"
            fi
          done

          PACKAGES=$(echo "$PACKAGES" | tr ' ' '\n' | sort -u | tr '\n' ' ')

          echo "Changed packages:"
          echo "$PACKAGES"
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

      - name: Installing dependencies in changed packages
        if: steps.changed_packages.outputs.packages != ''
        run: |
          for dir in ${{ steps.changed_packages.outputs.packages }}; do
            if [ -f "$dir/pyproject.toml" ]; then
              echo "Installing dependencies in $dir"
              cd "$dir"
              poetry install --no-root
              cd - > /dev/null
            fi
          done

      - name: Running ruff and mypy
        if: steps.changed_packages.outputs.packages != ''
        run: |
          failures=0
          for dir in ${{ steps.changed_packages.outputs.packages }}; do
            echo "Running Ruff in $dir"
            poetry run ruff check --config ./pyproject.toml "$dir" || failures=1
            echo "Running mypy in $dir"
            poetry run mypy --config-file ./pyproject.toml "$dir" || failures=1
          done
          exit $failures
